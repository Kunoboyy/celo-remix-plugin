{"version":3,"sources":["../node_modules/blind-threshold-bls/src sync","Footer.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","style","textAlign","padding","position","left","bottom","height","width","Footer","children","App","React","useState","client","setClient","language","setLanguage","fileName","setFileName","data","setData","constructor","setConstructor","account","setAccount","network","setNetwork","contract","setContract","contractAdr0","setContractAdr0","celo","setCelo","busy","setBusy","a","window","ethereum","enable","contractData","replace","newContract","kit","web3","eth","Contract","JSON","parse","stringify","abi","args","i","inputs","length","type","push","value","toString","rawTx","from","deploy","evm","bytecode","object","arguments","encodeABI","sendTransaction","txReceipt","contractAddress","console","error","getConstructor","temp","onChange","target","MethodParmsForm","props","list","parms","items","map","parm","index","Form","Group","key","Text","className","name","Control","placeholder","size","Contracts","contracts","Card","Header","Body","handelContract","Networks","NETWORK","Object","as","changeNetwork","useEffect","createIframeClient","Celo","onload","solidity","on","source","languageVersion","init","Container","hidden","readOnly","InputGroup","Append","Button","variant","block","onClick","FormControl","open","blockscout","disabled","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0f5a3f30.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 506;","import React from \"react\";\n\nconst style = {\n  textAlign: \"center\",\n  padding: \"20px\",\n  position: \"fixed\",\n  left: \"0\",\n  bottom: \"0\",\n  height: \"50px\",\n  width: \"100%\",\n}\n\nfunction Footer({ children }) {\n  return (\n    <div>\n      <div style={style}>\n        <small></small>{ children }\n      </div>\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react'\nimport { Button, Card, Container, Form, FormControl, InputGroup } from 'react-bootstrap'\nimport { createIframeClient } from \"@remixproject/plugin\"\nimport { Celo, NETWORK } from \"@dexfair/celo-web-signer\"\nimport Footer from \"./Footer\";\n\nfunction App() {\n  const [client, setClient] = React.useState(null)\n  const [language, setLanguage] = React.useState('')\n  const [fileName, setFileName] = React.useState('')\n  const [data, setData] = React.useState([])\n  const [constructor, setConstructor] = React.useState({})\n\n  const [account, setAccount] = React.useState('')\n  const [network, setNetwork] = React.useState('Mainnet')\n  const [contract, setContract] = React.useState('')\n  const [contractAdr0, setContractAdr0] = React.useState('')\n\n  const [celo, setCelo] = React.useState(null)\n  const [busy, setBusy] = React.useState(false)\n\n  React.useEffect(() => {\n    async function init () {\n      if (!client) {\n        setClient(createIframeClient())\n        setCelo(new Celo(network))\n      } else {\n        await client.onload()\n        client.solidity.on('compilationFinished', (fileName, source, languageVersion, data) => {\n          // console.log(fileName, source, languageVersion, data)\n          setFileName(fileName)\n          setLanguage(languageVersion)\n          setData(data.contracts[fileName])\n          setContract(Object.keys(data.contracts[fileName]).length > 0 ? Object.keys(data.contracts[fileName])[0] : '')\n          getConstructor(data.contracts[fileName][Object.keys(data.contracts[fileName])[0]])\n        })\n        await celo.init(setNetwork, setAccount)\n      }\n    }\n    init()\n  })\n\n  async function connect() {\n    if (window.ethereum) {\n      window.ethereum.enable();\n    }\n  }\n\n  async function deploy() {\n    if (!busy) {\n      setBusy(true)\n      const contractData = data[contract.replace(` - ${fileName}`, '')]\n      const newContract = new celo.kit.web3.eth.Contract(JSON.parse(JSON.stringify(contractData.abi)))\n      const args = []\n      for(let i = 0; i < constructor.inputs.length; i++) {\n        if (constructor.inputs[i].type[constructor.inputs[i].type.length-1] === ']') {\n          args.push(JSON.parse(constructor.inputs[i].value))\n        } else {\n          args.push(constructor.inputs[i].value.toString())\n        }\n      }\n      try {\n        const rawTx = {\n          from: account,\n          data: newContract.deploy({ data: `0x${contractData.evm.bytecode.object}`, arguments: args }).encodeABI()\n        }\n        const txReceipt = await celo.sendTransaction(rawTx)\n        setContractAdr0(txReceipt.contractAddress)\n        // console.log(txReceipt.transactionHash)\n        setBusy(false)\n      } catch (error) {\n        // eslint-disable-next-line\n        console.error(error)\n        setBusy(false)\n      }\n    }\n  }\n\n  function atAddress() {\n    // TODO: interact with deployed contract\n  }\n\n  function getConstructor(contract) {\n    setConstructor({})\n    for(let i = 0; i < contract.abi.length; i++) {\n      if(contract.abi[i].type === 'constructor') {\n        const temp = JSON.parse(JSON.stringify(contract.abi[i]))\n        for (let i = 0; i < temp.inputs.length; i++) {\n          temp.inputs[i].value = ''\n          temp.inputs[i].onChange = (e) => {\n            temp.inputs[i].value = e.target.value\n          }\n        }\n        setConstructor(temp)\n        break\n      }\n    }\n  }\n\n  function MethodParmsForm(props) {\n    const list = props.parms.inputs ? props.parms.inputs : []\n    const items = list.map((parm, index) => (\n      <Form.Group key={index.toString()}>\n        <Form.Text className=\"text-muted\">\n          <small>{parm.name}</small>\n        </Form.Text>\n        <Form.Control type=\"text\" placeholder={parm.type} onChange={parm.onChange} size=\"sm\" />\n      </Form.Group>))\n    return (\n      <Form>\n        <Contracts contracts={data} fileName={fileName} />\n        <div className={list.length === 0 ? 'd-none' : ''}>\n          <Card>\n            <Card.Header size=\"sm\">\n              <small>{ (props.parms.name || props.parms.type) }</small>\n            </Card.Header>\n            <Card.Body>\n              { items }\n            </Card.Body>\n          </Card>\n        </div>\n      </Form>\n    )\n  }\n\n  function handelContract(e) {\n    setContract(e.target.value)\n    getConstructor(data[e.target.value.replace(` - ${fileName}`, '')])\n  }\n\n  function Networks() {\n    const list = NETWORK\n    const items = Object.keys(list).map((key) => <option key={key}>{key}</option> )\n    return (\n      <Form.Group>\n        <Form.Text className=\"text-muted\">\n          <small>NETWORK</small>\n        </Form.Text>\n        <Form.Control as=\"select\" value={network} onChange={(e) => {setNetwork(e.target.value); celo.changeNetwork(e.target.value);}}>\n          {items}\n        </Form.Control>    \n      </Form.Group>\n    )\n  }\n\n  function Contracts(props) {\n    const list = props.contracts\n    const items = Object.keys(list).map((key) => <option key={key}>{`${key} - ${props.fileName}`}</option> )\n    return (\n      <Form.Group>\n        <Form.Text className=\"text-muted\">\n          <small>CONTRACT</small>\n        </Form.Text>\n        <Form.Control as=\"select\" value={contract} onChange={handelContract}>\n          {items}\n        </Form.Control>\n      </Form.Group>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Form>\n          <Form.Group hidden>\n            <Form.Text className=\"text-muted\">\n              <small>LANGUAGE</small>\n            </Form.Text>\n            <Form.Control type=\"text\" placeholder=\"Language\" value={language} size=\"sm\" readOnly />\n          </Form.Group>\n          <Form.Group hidden>\n            <Form.Text className=\"text-muted\">\n              <small>FILE NAME</small>\n            </Form.Text>\n            <Form.Control type=\"text\" placeholder=\"File Name\" value={fileName} size=\"sm\" readOnly />\n          </Form.Group>\n          <Form.Group>\n          <Form.Text className=\"text-muted\">\n            <small>ACCOUNT</small>\n          </Form.Text>\n          <InputGroup>\n            <Form.Control type=\"text\" placeholder=\"Account\" value={account} size=\"sm\" readOnly />\n            <InputGroup.Append>\n              <Button className={account !== '' ? 'd-none' : ''} variant=\"warning\" block onClick={connect} size=\"sm\">\n                <small>Connect</small>\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n          </Form.Group>\n          <Networks />\n        </Form>\n        <hr />\n        <MethodParmsForm parms={constructor} />\n        <InputGroup className=\"mb-3\">\n          <FormControl value={contractAdr0} size=\"sm\" readOnly />\n          <InputGroup.Append>\n            <Button\n              variant=\"warning\"\n              size=\"sm\"\n              onClick={() => { window.open(`${NETWORK[network].blockscout}/address/${contractAdr0}`) }} disabled={busy || contractAdr0 === ''}\n            >\n              <i className=\"fas fa-globe\" />\n            </Button>\n            <Button variant=\"warning\" block onClick={deploy} size=\"sm\" disabled={busy || account === ''}>\n              <small>Deploy</small>\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Container>\n      <Footer\n        children={<small>by DexFair</small>}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}